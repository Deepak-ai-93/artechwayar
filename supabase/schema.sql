-- Drop existing table and bucket to start fresh
DROP TABLE IF EXISTS public.posts;

-- We are deleting and re-inserting the bucket to ensure a clean state.
DELETE FROM storage.buckets WHERE id = 'images';

-- Create the posts table
CREATE TABLE public.posts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title text NOT NULL,
  slug text NOT NULL UNIQUE,
  content text NOT NULL,
  "imageUrl" text,
  author text,
  tags text[],
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  user_id uuid REFERENCES auth.users(id)
);

-- Enable Row Level Security for the posts table
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;

-- Create policies for the posts table
CREATE POLICY "Allow public read access" ON public.posts FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to insert" ON public.posts FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow owner to update" ON public.posts FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow owner to delete" ON public.posts FOR DELETE USING (auth.uid() = user_id);


-- Create the images bucket
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('images', 'images', true, 5242880, ARRAY['image/jpeg', 'image/png', 'image/gif']);

-- Create policies for the images bucket
CREATE POLICY "Allow public read access on images" ON storage.objects FOR SELECT USING (bucket_id = 'images');
CREATE POLICY "Allow authenticated users to upload images" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'images' AND auth.role() = 'authenticated');
CREATE POLICY "Allow owner to update images" ON storage.objects FOR UPDATE USING (bucket_id = 'images' AND auth.uid() = owner) WITH CHECK (bucket_id = 'images' AND auth.uid() = owner);
CREATE POLICY "Allow owner to delete images" ON storage.objects FOR DELETE USING (bucket_id = 'images' AND auth.uid() = owner);
