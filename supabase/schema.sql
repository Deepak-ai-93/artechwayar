-- Drop existing policies, table, and bucket if they exist to ensure a clean setup.
-- This script is designed to be idempotent and can be run multiple times.

-- 1. Drop policies for storage.objects if they exist
DROP POLICY IF EXISTS "Allow authenticated users to upload images" ON "storage"."objects";
DROP POLICY IF EXISTS "Allow anyone to view images" ON "storage"."objects";

-- 2. Drop the posts table if it exists
DROP TABLE IF EXISTS "public"."posts" CASCADE;

-- 3. Delete all objects within the 'images' bucket.
-- This is necessary before we can delete the bucket itself.
DELETE FROM storage.objects WHERE bucket_id = 'images';

-- 4. Delete the 'images' bucket.
DELETE FROM storage.buckets WHERE id = 'images';


-- Create the 'images' bucket in Supabase Storage.
-- RLS policies will be added below to control access.
INSERT INTO storage.buckets (id, name, public)
VALUES ('images', 'images', true)
ON CONFLICT (id) DO NOTHING;

-- Create a table for public posts
CREATE TABLE public.posts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  title text NOT NULL,
  content text NOT NULL,
  author text,
  slug text UNIQUE,
  tags text[],
  "imageUrl" text,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Enable Row Level Security (RLS) for the posts table
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;

-- Create policies for the posts table
-- 1. Allow public read access for everyone
CREATE POLICY "Allow public read access" ON public.posts
  FOR SELECT USING (true);

-- 2. Allow authenticated users to insert their own posts
CREATE POLICY "Allow authenticated users to insert" ON public.posts
  FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);

-- 3. Allow users to update their own posts
CREATE POLICY "Allow users to update their own posts" ON public.posts
  FOR UPDATE USING (auth.uid() = user_id);

-- 4. Allow users to delete their own posts
CREATE POLICY "Allow users to delete their own posts" ON public.posts
  FOR DELETE USING (auth.uid() = user_id);


-- Create policies for the 'images' bucket in storage.objects
-- 1. Allow authenticated users to upload images
CREATE POLICY "Allow authenticated users to upload images"
  ON storage.objects FOR INSERT TO authenticated
  WITH CHECK (bucket_id = 'images');

-- 2. Allow anyone to view images
CREATE POLICY "Allow anyone to view images"
  ON storage.objects FOR SELECT
  USING (bucket_id = 'images');
