-- Create the posts table
CREATE TABLE if not exists posts (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  title text not null,
  content text not null,
  slug text not null,
  author text not null,
  "imageUrl" text,
  tags text[],
  user_id uuid references auth.users(id) not null
);

-- Set up Row Level Security (RLS)
-- 1. Enable RLS on the 'posts' table
alter table posts enable row level security;

-- 2. Create a policy that allows public read access
create policy "Public posts are viewable by everyone." on posts
  for select using (true);

-- 3. Create a policy that allows users to insert their own posts
create policy "Users can insert their own posts." on posts
  for insert with check (auth.uid() = user_id);

-- 4. Create a policy that allows users to update their own posts
create policy "Users can update their own posts." on posts
  for update using (auth.uid() = user_id);

-- 5. Create a policy that allows users to delete their own posts
create policy "Users can delete their own posts." on posts
  for delete using (auth.uid() = user_id);

-- Create a storage bucket for images
-- 1. Create the bucket
insert into storage.buckets (id, name, public)
values ('images', 'images', true)
on conflict (id) do nothing;

-- 2. Set up RLS for the storage bucket
-- 2.1. Create a policy for viewing images
create policy "Images are publicly accessible." on storage.objects
  for select using (bucket_id = 'images');

-- 2.2. Create a policy for uploading images
create policy "Users can upload images." on storage.objects
  for insert with check (bucket_id = 'images' and auth.role() = 'authenticated');
  
-- 2.3. Create a policy for updating images
create policy "Users can update their own images." on storage.objects
  for update using (auth.uid() = owner) with check (bucket_id = 'images');

-- 2.4. Create a policy for deleting images
create policy "Users can delete their own images." on storage.objects
  for delete using (auth.uid() = owner);
