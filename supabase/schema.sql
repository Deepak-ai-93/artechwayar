-- Create the posts table
CREATE TABLE if not exists posts (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  title text not null,
  slug text not null unique,
  content text not null,
  "imageUrl" text,
  author text,
  tags text[],
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;

-- Create policy for users to read all posts
CREATE POLICY "Allow read access to all users" ON posts
  FOR SELECT
  USING (true);

-- Create policy for users to insert their own posts
CREATE POLICY "Allow insert for authenticated users" ON posts
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Create policy for users to update their own posts
CREATE POLICY "Allow update for post owners" ON posts
  FOR UPDATE
  USING (auth.uid() = user_id);

-- Create policy for users to delete their own posts
CREATE POLICY "Allow delete for post owners" ON posts
  FOR DELETE
  USING (auth.uid() = user_id);

-- Create the images storage bucket
insert into storage.buckets (id, name, public)
values ('images', 'images', true)
on conflict (id) do nothing;

-- Create policy for authenticated users to upload images
create policy "Authenticated users can upload images"
  on storage.objects for insert to authenticated with check (
    bucket_id = 'images'
  );

-- Create policy for authenticated users to update their own images
create policy "Authenticated users can update their own images"
  on storage.objects for update to authenticated with check (
    bucket_id = 'images' and auth.uid() = owner
  );
  
-- Create policy for anyone to read images
CREATE POLICY "Allow public read access to images" ON storage.objects
  FOR SELECT
  USING (bucket_id = 'images');