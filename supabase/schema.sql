-- Create posts table
CREATE TABLE
  posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone ('utc'::TEXT, NOW()) NOT NULL,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE,
    "imageUrl" TEXT,
    author TEXT,
    tags TEXT[],
    user_id UUID REFERENCES auth.users (id) ON DELETE CASCADE
  );

-- Enable Row Level Security (RLS)
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;

-- Allow public read access to all posts
CREATE POLICY "Allow public read access" ON posts FOR
SELECT
  USING (TRUE);

-- Allow users to insert their own posts
CREATE POLICY "Allow individual insert access" ON posts FOR INSERT
WITH
  CHECK (auth.uid () = user_id);

-- Allow users to update their own posts
CREATE POLICY "Allow individual update access" ON posts FOR
UPDATE USING (auth.uid () = user_id);

-- Allow users to delete their own posts
CREATE POLICY "Allow individual delete access" ON posts FOR DELETE USING (auth.uid () = user_id);

-- Create storage bucket for images
INSERT INTO
  storage.buckets (id, name, public)
VALUES
  ('images', 'images', TRUE) ON CONFLICT (id) DO NOTHING;

-- Create policy for public read access to images
CREATE POLICY "Allow public read access for images" ON storage.objects FOR
SELECT
  USING (bucket_id = 'images');

-- Create policy for authenticated users to upload images
CREATE POLICY "Allow authenticated users to upload images" ON storage.objects FOR INSERT
WITH
  CHECK (
    bucket_id = 'images'
    AND auth.role () = 'authenticated'
  );

-- Create policy for users to manage their own images
CREATE POLICY "Allow user to manage their own images" ON storage.objects FOR
UPDATE,
DELETE USING (
  auth.uid () = owner
  AND bucket_id = 'images'
);